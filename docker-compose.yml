version: "3.9"
networks:
  park20:
    name: park20
    driver: bridge
    external: true

services:
  eureka:
    build:
      context: ./eureka
      dockerfile: Dockerfile
    environment:
      EUREKA_CLIENT_REGISTER-WITH-EUREKA: "false"
      EUREKA_CLIENT_FETCH-REGISTRY: "false"
      eureka.client.registerWithEureka: "false"
      eureka.client.fetchRegistry: "false"
      # without this, eureka keeps trying to register itself for some reason
      eureka.server.maxThreadsForPeerReplication: 0
    ports:
        - "8761:8761"
    networks:
      - park20

  gateway:
    depends_on:
      eureka:
        condition: service_started
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
    ports:
      - "8080:8080"
    networks:
      - park20

  #Park BackOffice 1
  park_bo_mcs_1:
    depends_on:
      - eureka
    container_name: park_bo_mcs_1
    build: ./park_bo_mcs
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-park-microservice
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5502/
      spring.rabbitmq.host: rabbitmq4
      server.port: 8094
      spring.profiles.active: bootstrap

    ports:
      - "8094:8094"
    networks:
      - park20


  #Payment BackOffice 1
  payments_bo_mcs_1:
    depends_on:
      - eureka
    container_name: payments_bo_mcs_1
    build: ./payments_bo_mcs
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-payments-microservice
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5506/
      spring.rabbitmq.host: rabbitmq4
      server.port: 8086
      spring.profiles.active: bootstrap
    ports:
      - "8086:8086"
    networks:
      - park20

  #User BackOffice 1
  users_bo_mcs_1:
    depends_on:
      - eureka
    container_name: users_bo_mcs_1
    build: ./users_bo_mcs
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-user-microservice
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5510/
      spring.rabbitmq.host: rabbitmq4
      server.port: 8090
      spring.profiles.active: bootstrap
    ports:
      - "8090:8090"
    networks:
      - park20

  #Display FrontEnd 1
  display_mcs_fe_1:
    depends_on:
      - eureka
    container_name: display_mcs_fe_1
    build: ./display_mcs_fe
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-display-frontend-1
      display.id: 1
      server.port: 8101
      spring.profiles.active: bootstrap
    ports:
      - "8101:8101"
    networks:
      - park20

  #Display FrontEnd 2
  display_mcs_fe_2:
    depends_on:
      - eureka
    container_name: display_mcs_fe_2
    build: ./display_mcs_fe
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-display-frontend-2
      display.id: 2
      server.port: 8102
      spring.profiles.active: bootstrap
    ports:
      - "8102:8102"
    networks:
      - park20

  #Barrier FrontEnd 1
  barrier_mcs_fe_1:
    depends_on:
      - eureka
    container_name: barrier_mcs_fe_1
    build: ./barrier_mcs_fe
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-barrier-frontend-1
      barrier.type: entrance
      barrier.id: 1
      park.id: 1
      park.number: 1
      server.port: 8201
      spring.profiles.active: bootstrap
    ports:
      - "8201:8201"
    networks:
      - park20

  #Barrier FrontEnd 2
  barrier_mcs_fe_2:
    depends_on:
      - eureka
    container_name: barrier_mcs_fe_2
    build: ./barrier_mcs_fe
    restart: on-failure
    environment:
      eureka.client.service-url.defaultZone: http://host.docker.internal:8761/eureka
      eureka.instance.ip-address: host.docker.internal
      spring.application.name: park20-barrier-frontend-2
      barrier.type: exit
      barrier.id: 2
      park.id: 1
      park.number: 1
      server.port: 8202
      spring.profiles.active: bootstrap
    ports:
      - "8202:8202"
    networks:
      - park20